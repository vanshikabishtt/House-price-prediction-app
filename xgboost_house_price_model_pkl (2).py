# -*- coding: utf-8 -*-
"""xgboost_house_price_model.pkl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WEWyFHYZqACvf7GzjheOhuaZcv1Ic0vb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score

df=pd.read_csv("1553768847-housing.csv")
df.head()

df.info()

df.isnull().sum()

df=df.dropna()

df.hist(figsize=(10,7))

plt.figure(figsize=(12,6))
sns.pairplot(df)
plt.show()

df["Bedroom_ratio"]=df["total_bedrooms"]/df["total_rooms"]
df["household_rooms"]=df["total_rooms"]/df["households"]

plt.figure(figsize=(12,7))
sns.heatmap(df.select_dtypes(include=['number']).corr(),annot= True,cmap= "YlGnBu")

df["total_rooms"]= np.log(df["total_rooms"])+1
df["total_bedrooms"]= np.log(df["total_bedrooms"])+1
df["population"]= np.log(df["population"])+1
df["households"]= np.log(df["households"])+1

df.hist(figsize=(10,7))

correlation_matrix= df.select_dtypes(include=['number']).corr()
sns.heatmap(correlation_matrix,annot= True,cmap="YlGnBu")
plt.show()

X=df[['housing_median_age','total_bedrooms','total_rooms']]
y=df['median_income']

X_train,X_test,y_train,y_test= train_test_split(X,y,test_size= 0.2,random_state=42)

model=LinearRegression()
model.fit(X_train,y_train)

y_pred=model.predict(X_test)

#Mean Squared Error(MSE)
mse= mean_squared_error(y_test,y_pred)
print(f"mean squared error(MSE):{mse}")

#R-squared Error(R**2)
r2=r2_score(y_test,y_pred)
print(f"R-squared error(R2):{r2}")

plt.scatter(y_test,y_pred)
plt.xlabel('Actual prices')
plt.ylabel('Predicted prices')
plt.title('Actual vs Predicted house prices')
plt.show()

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
X_scaled= scaler.fit_transform(X)

from scipy import stats
z_scores= stats.zscore(X)
z_scores

df_no_outliers= df[(np.abs(z_scores)<3).all(axis=1)]

X=df_no_outliers[['housing_median_age','total_bedrooms','total_rooms']]
y=df_no_outliers['median_income']

X_scaled=scaler.fit_transform(X)

X_train,X_test,y_train,y_test= train_test_split(X_scaled,y,test_size= 0.2,random_state=42)

model=LinearRegression()
model.fit(X_train,y_train)

y_pred=model.predict(X_test)

#Mean Squared Error(MSE)
mse= mean_squared_error(y_test,y_pred)
print(f"mean squared error(MSE):{mse}")

#R-squared Error(R**2)
r2=r2_score(y_test,y_pred)
print(f"R-squared error(R2):{r2}")

from sklearn.ensemble import RandomForestRegressor
rf_model= RandomForestRegressor(n_estimators= 100,random_state=42)
rf_model.fit(X_train,y_train)

rf_pred= rf_model.predict(X_test)
rf_pred

#Mean Squared Error(MSE)
mse= mean_squared_error(y_test,rf_pred)
print(f"mean squared error(MSE):{mse}")

#R-squared Error(R**2)
r2=r2_score(y_test,rf_pred)
print(f"R-squared error(R2):{r2}")



import xgboost as xgb

xgb_model= xgb.XGBRegressor(objective='reg:squarederror',n_estimators=100,random_state=42)
xgb_model.fit(X_train,y_train)

xgb_pred=xgb_model.predict(X_test)

#Mean Squared Error(MSE)
mse= mean_squared_error(y_test,xgb_pred)
print(f"mean squared error(MSE):{mse}")

#R-squared Error(R**2)
r2=r2_score(y_test,xgb_pred)
print(f"R-squared error(R2):{r2}")



import joblib

joblib.dump(xgb_model,'xgboost_house_price_model.pkl')

loaded_model=joblib.load('xgboost_house_price_model.pkl')

y_new_pred=loaded_model.predict(X_test)



import streamlit as st
import numpy as np
import joblib

model = joblib.load('xgboost_house_price_model.pkl')

st.title("🏡 House Price Prediction App")

st.write("Enter the housing details below:")

median_age = st.number_input("Median Age of the House", min_value=1.0, max_value=100.0, value=20.0, step=1.0)
total_bedroom = st.number_input("Total Bedrooms", min_value=1.0, max_value=10000.0, value=500.0, step=10.0)
total_room = st.number_input("Total Rooms", min_value=1.0, max_value=20000.0, value=1000.0, step=10.0)

# Input array in correct shape (2D)
input_data = np.array([[median_age, total_bedroom, total_room]])

if st.button("Predict House Price"):
    prediction = model.predict(input_data)
    st.success(f"💰 Estimated House Price: ₹ {round(prediction[0], 2)}")

